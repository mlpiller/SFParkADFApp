package model.duplicateparkingspace.services;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import model.duplicateparkingspace.services.common.DuplicateParkingSpaceAM;

import oracle.jbo.JboException;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jan 24 16:55:23 PST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DuplicateParkingSpaceAMImpl extends ApplicationModuleImpl implements DuplicateParkingSpaceAM {
    /**
     * This is the default constructor (do not remove).
     */
    public DuplicateParkingSpaceAMImpl() {
    }

    /**
     * Container's getter for ParkingSpaceInventoryROView1.
     * @return ParkingSpaceInventoryROView1
     */
    public ViewObjectImpl getParkingSpaceInventoryROView1() {
        return (ViewObjectImpl)findViewObject("ParkingSpaceInventoryROView1");
    }

    /**
     * Container's getter for ParkingSpaceQueryByParkingSpaceIdROView1.
     * @return ParkingSpaceQueryByParkingSpaceIdROView1
     */
    public ViewObjectImpl getParkingSpaceQueryByParkingSpaceIdROView1() {
        return (ViewObjectImpl)findViewObject("ParkingSpaceQueryByParkingSpaceIdROView1");
    }


    /*
     * Calling Stored Database Function Logic
     */
    private static int VARCHAR2 = Types.VARCHAR;

    protected Object callDatabaseFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }

    //   DUPLICATE_PS (p_PARKING_SPACE_ID IN NUMBER, p_POST_ID in VARCHAR2, p_SPACE_NUM in NUMBER, p_USER in VARCHAR2)

    public String CallDuplicateParkingSpace(Number parkingSpaceId, String postId,
                                            Number spaceNumber, String userId) {
        return (String)callDatabaseFunction(VARCHAR2, "DUPLICATE_PS(?,?,?,?)",
                                            new Object[] { parkingSpaceId, postId, spaceNumber,
                                                           userId });
    }

    public void logProcedure() {
        getDBTransaction().executeCommand("begin insert_into_logger; end;");
    }

}
